  
Свойства шрифта
font-family: "Имя шрифта", "Имя шрифта", тип шрифта
Устанавливает семейство шрифта
Типы шрифта:
serif — шрифты с засечками (антиквенные), типа Times;
sans-serif — рубленные шрифты (шрифты без засечек или гротески), типичный представитель — Arial;
cursive — курсивные шрифты;
fantasy — декоративные шрифты;
monospace — моноширинные шрифты, ширина каждого символа в таком семействе одинакова (шрифт Courier).
font-size
Определяет размер шрифта элемента.
font-style:
Определяет начертание шрифта — обычное, курсивное или наклонное.
normal - Обычное начертание текста.
italic - Курсивное начертание. 
oblique - Наклонное начертание. Курсив и наклонный шрифт при всей их похожести не одно и то же. Курсив это специальный шрифт имитирующий рукописный, наклонный же образуется путем наклона обычных знаков вправо. 
font-weight:
Устанавливает насыщенность шрифта.
100 - thin
300 - lite
400 - normal
500 - medium
600 - semibold
700 - bold
900 - black
Свойства текста
color
Определяет цвет текста. Для задания цветов обычно используются числа в шестнадцатеричном коде, 
либо с помощью RGB.
text-align
Определяет горизонтальное выравнивание текста в пределах элемента. 
center - Выравнивание текста по центру.
justify - Выравнивание по ширине, что означает одновременное выравнивание по левому и правому краю. Чтобы произвести это действие браузер в этом случае добавляет пробелы между словами.
left - Выравнивание текста по левому краю. 
right - Выравнивание текста по правому краю.
text-decoration
Добавляет оформление текста в виде его подчеркивания, перечеркивания, линии над текстом и мигания. 
Одновременно можно применить более одного стиля, перечисляя значения через пробел. Это свойство наследуется и может принимать значения:
line-through - Создает перечеркнутый текст.
overline - Линия проходит над текстом.
underline - Устанавливает подчеркнутый текст. 
none - Отменяет все эффекты, в том числе и подчеркивания у ссылок, которое задано по умолчанию.
text-shadow: горизонтальное_смещение вертикальное_смещение размер цвет;
Добавляет тень к тексту.
Прмер text-shadow: 1px 1px 1px #000;
text-transform
Управляет преобразованием текста в заглавные или прописные символы.
capitalize  - Первый символ каждого слова в предложении будет заглавным. Остальные символы свой вид не меняют.
lowercase - Все символы текста становятся строчными (нижний регистр). 
uppercase - Все символы текста становятся прописными (верхний регистр).
none - Не меняет регистр символов.
text-indent
Устанавливает величину отступа первой строки блока текста. При меняется, если нам нужно создать что-то типа красной строки.
letter-spacing
Определяет интервал между символами (буквами). Используется когда нужно разрядить текст.
line-height
Устанавливает межстрочный интервал текста. Широко применяется при верстке текста.
white-space
Управляет свойствами пробелов между словами. Пименяется в основном со значением 
nowrap которое запрещает перенос строки. Таким образом весь текст отображается в одну строку и не ломается. Значение normal вернет все как было.
word-spacing
Устанавливает интервал между словами.





box-sizing
Применяется для изменения алгоритма расчета ширины и высоты элемента. 
Свойство наследуется.
content-box - Основывается на стандартах CSS, при этом свойства width и height задают ширину и высоту контента и не включают в себя значения отступов, полей и границ.
border-box - Свойства width и height включают в себя значения полей и границ, но не отступов (margin). Эта модель используется браузером Internet Exporer в режиме несовместимости.
padding-box - Свойства width и height включают в себя значения полей, но не отступов (margin) и границ (border). 
=========================================
padding
Внутренний отступ элемента
При указании поля в процентах, значение считается от ширины родителя элемента.
Свойство не наследуется.

padding: со_всех_сторон;
padding: сверху справа снизу слева;
padding: сверху_снизу справа_слева;
padding: сверху справа_слева снизу;

Отступ сверху и снизу не действует на срочные теги
=========================================
margin
Внешний отступ элемента
При указании поля в процентах, значение считается от ширины родителя элемента.
Свойство не наследуется.
Значение может быть как положительным, так и отрицательным числом.

margin: со_всех_сторон;
margin: сверху справа снизу слева;
margin: сверху_снизу справа_слева;
margin: сверху справа_слева снизу;

Отступ сверху и снизу не действует на срочные теги
=========================================
width
Устанавливает ширину блочных тегов и некоторыйх строчных (например img)
Свойство не наследуется.
width:100px;
width:10%;
=========================================
max-width
Устанавливает максимальную ширину блочных тегов и некоторыйх строчных (например img)
=========================================
min-width
Устанавливает минимальную ширину блочных тегов и некоторыйх строчных (например img)
=========================================
height:
Устанавливает высоту блочных тегов и некоторыйх строчных (например img)
Свойство не наследуется.
height:100px;
height:10%;
=========================================
min-height
Свойство не наследуется.
=========================================
max-height
Свойство не наследуется.
=========================================
overflow 
Управляет отображением содержания блочного элемента
visible - Отображается все содержание элемента, даже за пределами установленной высоты и ширины. 
hidden - Отображается только область внутри элемента, остальное будет скрыто.
scroll - Всегда добавляются полосы прокрутки.
auto - Полосы прокрутки добавляются только при необходимости.
=========================================
display:
Многоцелевое свойство, которое определяет, как элемент должен быть показан в документе.
Свойство не наследуется.

block - Элемент показывается как блочный. Применение этого значения для встроенных элементов, например тега <span>, заставляет его вести подобно блокам — происходит перенос строк в начале и в конце содержимого. 											
inline - Элемент отображается как встроенный. Использование блочных тегов, таких как <div> и <p>, автоматически создает перенос и показывает содержимое этих тегов с новой строки. Значение inline отменяет эту особенность, поэтому содержимое блочных элементов начинается с того места, где окончился предыдущий элемент. 											
inline - block - Это значение генерирует блочный элемент, который обтекается другими элементами веб-страницы подобно встроенному элементу. Фактически такой элемент по своему действию похож на встраиваемые элементы (вроде тега <img>). При этом его внутренняя часть форматируется как блочный элемент, а сам элемент — как встроенный. 											
none - Временно удаляет элемент из документа. Занимаемое им место не резервируется и веб-страница формируется так, словно элемента и не было. 
=========================================



=========================================
border
Универсальное свойство border позволяет одновременно установить толщину, 
стиль и цвет границы вокруг элемента.
border: 1px solid #000; (размер стиль цвет)
Основные стили -solid dotted dashed
=========================================
border-radius
Устанавливает радиус скругления уголков блока.
border-radius:50%; - кргуг
Можно использовать вместе с overflow: hidden;
=========================================
outline
Универсальное свойство, одновременно устанавливающее цвет, 
стиль и толщину внешней границы на всех четырех сторонах элемента. 
В отличие от линии, задаваемой через border, свойство outline 
не влияет на положение блока и его ширину. 
Также нельзя задать параметры линии на отдельных сторонах элемента, 
outline применяется сразу ко всем четырём сторонам. 
=========================================
box-shadow
Добавляет тень к элементу.
box-shadow: сдвиг_по_гориз сдвиг_по_верт радиус расстояние
Можно добавить много теней. На тень влияет свойство border-radius.
=========================================
opacity
Определяет уровень прозрачности элемента.
Отличие opacity:0; от display:none; в том что блок не убирается из верстки а только становиться прозрачным, то есть занимаемое им место остается. Так же, с прозрачными элементами все еще можно взаимодействовать, например кликать по ссылкам.
=========================================
visibility
Предназначен для отображения или скрытия элемента.
Отличие visibility: hidden; от display:none; в том что блок не убирается из верстки а только скрывается, то есть занимаемое им место остается.
Отличие visibility: hidden; от opacity:0; в том что блок скрывается и взаимодействовать с ним нельзя.
=========================================
Синтаксис, то есть правило записи псевдоклассов прост, мы пишем селектор класса либо селектор типа 
ставим двоеточие, пишем тот или иной псевдосласс и уже после этого открываем фигурные 
скобки и пишем нужные CSS параметры:
Селектор:Псевдокласс { параметры стиля }
================================================================================================================
Отлично, теперь рассмотрим псевдоклассы состояния.

:hover
Срабатывает при наведении на элемент, часто применяется применяется как для ссылок так и для любого другого элемента.

:active
Срабатывает при нажатии на элемент. В основном применяется к ссылкам и кнопкам.

:visited
Срабатывает для посещенных ссылок

:focus
Срабатывает при получении элементом фокуса. Часто применяется к елементам форм. Например инпутам.
================================================================================================================
Теперь рассмотрим псевдоклассы положения в коде.

:first-child
Обращение к первому элементу в блоке

:last-child
Обращение к последнему элементу в блоке

:nth-child(порядковый номер элемента)
Обращение к конкретным элементам в блоке

odd - Обращается к элементам с нечётными номерами
even - Обращается к элементам с чётными номерами
================================================================================================================
Сайт методологии БЭМ
https://ru.bem.info/methodology/quick-start/
=================================================
ОЧЕНЬ ценю твой ЛАЙК и КОММЕНТ!
Поддержать канал: https://www.patreon.com/freelancerlifestyle
Telegram канал: https://t.me/freelancer_lifestyle или https://teleg.run/freelancer_lifestyle
Instagram: https://www.instagram.com/freelancer.lifestyle/
Facebook: https://www.facebook.com/freelancerlifestyle/
Telegram ЧАТ: https://t.me/flschat или https://teleg.run/flschat
=================================================
Блок – это функционально независимый компонент страницы, который может быть повторно использован. Когда мы задаем блоку имя класса то должны отвечать на вопрос «что это?» а не «какой, как выглядит?».
=================================================
Элемент – это составная часть блока, которая не может использоваться в отрыве от него. Так же как для блока имя класса должно отвечать на вопрос «Что это?», но синтаксис записи будет следующим:
имякласса__имяэлемента
=================================================
Модификатор.
Применяется для определения или уточнения внешнего вида, состояния или поведения блока либо элемента. Когда нужно выделить некий объект из множества таких же.
Имя класса модификатора должно отвечать на вопрос «какой?» «как выглядит?» «как себя ведет\состояние?»
Модификатор дописывается к классу блока либо элемента путем дублирования основного класса с добавлением одного нижнего подчеркивания и имени модификатора.
===================Вложенность блоков==============================
<!-- Блок `about` -->
<div class="about">
	<!-- Вложенный блок `title` -->
	<div class="title"></div>
	<!-- Вложенный блок `subtitle` -->
	<div class="subtitle"></div>
</div>
===================Вложенность элементов==============================
<!-- Верно -->
<!-- Блок `row` -->
<div class="row">
	<!-- Элемент `column` -->
	<div class="row__column ">
		<!-- Элемент `item` -->
		<div class="row__item">

		</div>
	</div>
</div>

<!-- Неверно -->
<!-- Блок `row` -->
<div class="row">
	<!-- Элемент `column` -->
	<div class="row__column ">
		<!-- Элемент `item` -->
		<div class="row__column__item">

		</div>
	</div>
</div>
====================Принадлежность элементов===================================
<!-- Верный пример -->
<!-- Блок `about` -->
<div class=" about">
	<!-- Элемент `title` -->
	<div class="about__title"></div>
	<!-- Элемент `subtitle` -->
	<div class=" about__subtitle"></div>
</div>


<!-- Неверный пример -->
<!-- Блок `about` -->
<div class=" about">
	<!-- Элемент `title` -->
	<div class="about__title"></div>
</div>
<!-- Элемент `subtitle` -->
<div class=" about__subtitle"></div>

====================Необязательность элементов===================================
<!-- Блок `about` -->
<div class=" about">
	<!-- Вложенный блок `title` -->
	<div class="title"></div>
	<!-- Вложенный блок `subtitle` -->
	<div class="subtitle"></div>
</div>
====================Модификатор===================================
<nav class="menu">
	<a href="" class="menu__item menu__item_active">HOME</a>
	<a href="" class="menu__item">ABOUT US</a>
	<a href="" class="menu__item">PORTFOLIO</a>
	<a href="" class="menu__item">CONTACT</a>
</nav>
====================Микс===================================
<!-- Блок `about` -->
<div class=" about">
	<!-- Элемент `title` -->
	<div class="about__title title"></div>
	<!-- Элемент `subtitle` -->
	<div class=" about__subtitle subtitle"></div>
</div>





=================================================
ОЧЕНЬ ценю твой ЛАЙК и КОММЕНТ!
Поддержать канал: https://www.patreon.com/freelancerlifestyle
Telegram канал: https://t.me/freelancer_lifestyle или https://teleg.run/freelancer_lifestyle
Instagram: https://www.instagram.com/freelancer.lifestyle/
Facebook: https://www.facebook.com/freelancerlifestyle/
Telegram ЧАТ: https://t.me/flschat или https://teleg.run/flschat
=================================================

Основные теги влияющие на отображение страницы

<!-- Кодировка страницы -->
<meta http-equiv="Content-type" content="text/html;charset=UTF-8">
С появлением HTML5 можно использовать 
<meta charset="UTF-8">
<!-- Настройки адаптивности страницы  -->
Фиксированная ширина
<meta name="viewport" content="width=1170">
Адаптивность
<meta name="viewport" content="width=device-width">

<!-- Отключает принудительную ссылку у номера телефона на iOS -->
<meta name="format-detection" content="telephone=no">

=================================================

SEO

<!-- Краткое описание страницы  -->
<meta name="description" content=" ">
Пишем не более 140 символов.
<!-- Ключевые слова страницы  -->
<meta name="keywords" content=" "> 
Пишем не более 20ти слов. Ключевые фразы разделяем запятой.

<!-- Управление доступом поисковых роботов к странице -->
<meta name="robots" content="">

По умолчанию страница индексируется поисковыми система, то есть этот мета тег дополнительно указывать не нужно. Но если задача стоит запретить либо ограничить индексацию, то существуют следующие значения:

none – запретить индексацию страницы полностью.
noindex – запретить индексацию содержимого страницы.
nofollow – игнорировать ссылки в пределах веб-страницы. 
noimageindex - запретить индексацию присутствующих на странице изображений
noarchive - запретить  вывод в результатах поиска ссылки «Сохраненная копия»
nosnippet - запретить  вывод в поисковой выдаче под названием страницы фрагмента текста, описывающего её содержание.

Значения указываются через запятую. Например:

Запрет индексации страницы полностью будет выглядеть так:
<meta name="robots" content="noindex, nofollow">
или так
<meta name="robots" content="none">

Запрет индексации ссылок и изображений на странице будет выглядеть так:
<meta name="robots" content="noimageindex, nofollow">
при этом текст страницы будет доступен к индексации.

=================================================
Технические
<!-- Автор страницы -->
<meta name="Author" content="Пупкин Василий Петрович"> 
<!-- Авторские права -->
<meta name="Copyright" content="Зимина Татьяна Юрьевна"> 
<!-- Адрес автора -->
<meta name="Address" content="Луна, кратер №97">
<!-- Редирект (перезагрузка) страницы. Задержка в секундах; url=Адрес сайта/страницы -->
<meta http-equiv="refresh" content="S; url=URL">

S= Задержка в секундах
URL= Адрес сайта/страницы

=================================================

Для социальных сетей
 
Facebook
Что бы настроить вид нашей страницы в посте мы пишем следующие мета теги:

<!-- локализация сайта, для русскоязычного сайта ru_RU -->
<meta property="og:locale" content="ru_RU">
<!-- тип контента, по умолчанию используется article -->
<meta property="og:type" content="article">
<!-- заголовок страницы, который будет выводится в записи социальной сети -->
<meta property="og:title" content="META теги">
<!-- описание страницы -->
<meta property="og:description" content="Описание страницы про META теги">
<!-- ссылка на изображение, которое будет публиковаться в записи -->
<meta property="og:image" content="http://fls.guru/meta/img/bg.jpg">
<!-- ссылка на текущую страницу -->
<meta property="og:url" content="http://fls.guru/meta/ ">
<!-- название сайта -->
<meta property="og:site_name" content="Фрилансер по жизни">

Проверить разметку можно в валидаторе от Facebook https://developers.facebook.com/tools/debug/sharing/


Подробнее о протоколе Open Graph можно почитать в официальной документации по ссылке в описании. https://ruogp.me/

Для создания Twitter Cards мета теги будут иметь другой вид:

<!-- Тип карты, по умолчанию используется summary -->
<meta name="twitter:card" content="summary">
<!-- Имя/логин автора -->
<meta name="twitter:site" content="Жека">
<!-- Название страницы -->
<meta name="twitter:title" content="META теги">
<!-- Описание страницы -->
<meta name="twitter:description" content="про META теги">
<!-- Cсылка на изображение -->
<meta name="twitter:image" content="http://fls.guru/meta/img/bg.jpg">

Проверяем результат в валидаторе твиттер 
https://cards-dev.twitter.com/validator

Подробнее о создании Twitter Cards можно почитать в официальной документации по ссылке в описании.
https://developer.twitter.com/en/docs/tweets/optimize-with-cards/guides/getting-started

Сайт методологии БЭМ
https://ru.bem.info/methodology/quick-start/
=================================================
ОЧЕНЬ ценю твой ЛАЙК и КОММЕНТ!
Поддержать канал: https://www.patreon.com/freelancerlifestyle
Telegram канал: https://t.me/freelancer_lifestyle или https://teleg.run/freelancer_lifestyle
Instagram: https://www.instagram.com/freelancer.lifestyle/
Facebook: https://www.facebook.com/freelancerlifestyle/
Telegram ЧАТ: https://t.me/flschat или https://teleg.run/flschat
=================================================
Блок – это функционально независимый компонент страницы, который может быть повторно использован. Когда мы задаем блоку имя класса то должны отвечать на вопрос «что это?» а не «какой, как выглядит?».
=================================================
Элемент – это составная часть блока, которая не может использоваться в отрыве от него. Так же как для блока имя класса должно отвечать на вопрос «Что это?», но синтаксис записи будет следующим:
имякласса__имяэлемента
=================================================
Модификатор.
Применяется для определения или уточнения внешнего вида, состояния или поведения блока либо элемента. Когда нужно выделить некий объект из множества таких же.
Имя класса модификатора должно отвечать на вопрос «какой?» «как выглядит?» «как себя ведет\состояние?»
Модификатор дописывается к классу блока либо элемента путем дублирования основного класса с добавлением одного нижнего подчеркивания и имени модификатора.
===================Вложенность блоков==============================
<!-- Блок `about` -->
<div class="about">
	<!-- Вложенный блок `title` -->
	<div class="title"></div>
	<!-- Вложенный блок `subtitle` -->
	<div class="subtitle"></div>
</div>
===================Вложенность элементов==============================
<!-- Верно -->
<!-- Блок `row` -->
<div class="row">
	<!-- Элемент `column` -->
	<div class="row__column ">
		<!-- Элемент `item` -->
		<div class="row__item">

		</div>
	</div>
</div>

<!-- Неверно -->
<!-- Блок `row` -->
<div class="row">
	<!-- Элемент `column` -->
	<div class="row__column ">
		<!-- Элемент `item` -->
		<div class="row__column__item">

		</div>
	</div>
</div>
====================Принадлежность элементов===================================
<!-- Верный пример -->
<!-- Блок `about` -->
<div class=" about">
	<!-- Элемент `title` -->
	<div class="about__title"></div>
	<!-- Элемент `subtitle` -->
	<div class=" about__subtitle"></div>
</div>


<!-- Неверный пример -->
<!-- Блок `about` -->
<div class=" about">
	<!-- Элемент `title` -->
	<div class="about__title"></div>
</div>
<!-- Элемент `subtitle` -->
<div class=" about__subtitle"></div>

====================Необязательность элементов===================================
<!-- Блок `about` -->
<div class=" about">
	<!-- Вложенный блок `title` -->
	<div class="title"></div>
	<!-- Вложенный блок `subtitle` -->
	<div class="subtitle"></div>
</div>
====================Модификатор===================================
<nav class="menu">
	<a href="" class="menu__item menu__item_active">HOME</a>
	<a href="" class="menu__item">ABOUT US</a>
	<a href="" class="menu__item">PORTFOLIO</a>
	<a href="" class="menu__item">CONTACT</a>
</nav>
====================Микс===================================
<!-- Блок `about` -->
<div class=" about">
	<!-- Элемент `title` -->
	<div class="about__title title"></div>
	<!-- Элемент `subtitle` -->
	<div class=" about__subtitle subtitle"></div>
</div>


=================================================
ШПАРГАЛКА:
http://fls.guru/flexbox.html
=================================================
